image: docker:latest
services:
  - docker:dind

before_script:
  
  - docker info
  - apk update
  - apk upgrade
  - apk add curl jq python3 python3-dev build-base libffi-dev libressl-dev gettext
  - curl -O https://bootstrap.pypa.io/get-pip.py
  - python3 get-pip.py
  - pip install docker-compose
  - pip install pytest


build:
    stage: build
    script:

        - docker image  prune -f
        - docker-compose -f docker-compose.yml build --no-cache
        - docker-compose -f docker-compose.yml up -d
        - echo "The system is up and running"
 
test:
    stage: test
    script:
        - docker-compose -f docker-compose.yml build --no-cache
        - docker-compose -f docker-compose.yml up -d
        - cd  tests
        - docker build -t tests .
        - docker run  --network=message-broker-deployed-to-heroku_internal_network tests

pylint:
  stage: test
  image: python:3.7-slim
  before_script:
    - mkdir -p public/badges public/lint
    - echo undefined > public/badges/$CI_JOB_NAME.score
    - pip install pylint_gitlab
  script:
    - pylint --exit-zero --output-format=text $(find -type f -name "*.py" ! -path "**/.venv/**") | tee /tmp/pylint.txt
    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > public/badges/$CI_JOB_NAME.score
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > codeclimate.json
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > public/lint/index.html
  after_script:
    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
    - |
      echo "Your score is: $(cat public/badges/$CI_JOB_NAME.score)"
  artifacts:
    paths:
      - public
    reports:
      codequality: codeclimate.json
    when: always
staging:
  stage: deploy
  script:
     - apk add --no-cache git     
     - apk add --update ruby-dev
     - gem install dpl
     - apk add --no-cache ruby-json 
     - dpl --provider=heroku --app=devopsprojectwork --api-key=$HEROKU_STAGING_API_KEY
     - echo "Deployed to Heroku"

production:
  stage: deploy
  script:
     - apk add --no-cache git
     - apk add --update ruby-dev
     - gem install dpl
     - apk add --no-cache ruby-json 
     - dpl --provider=heroku --app=devopsprojectwork --api-key=$HEROKU_PRODUCTION_API_KEY
     - echo "Deployed to Heroku"
  only:
    - tags